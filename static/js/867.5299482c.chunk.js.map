{"version":3,"file":"static/js/867.5299482c.chunk.js","mappings":"8LAEaA,E,QAAYC,GAAAA,IAAH,qE,SCKtB,EAJmB,WACjB,OAAO,SAACD,EAAD,UAAW,mCACnB,C,4FCHYE,EAAaD,EAAAA,GAAAA,IAAH,0EAMVE,EAAcF,EAAAA,GAAAA,IAAH,0F,SCLXG,EAAS,WACpB,OACE,UAACF,EAAD,YACE,SAACC,EAAD,UAAa,gBACb,SAAC,KAAD,CACEE,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,oBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,OAAQ,CAAC,UAAW,eAI3B,C,qICbKC,EAAc,mCAAG,WAAMC,GAAN,uFACEC,EAAAA,EAAAA,IAAA,UAClBC,EAAAA,EAAAA,UADkB,OAHV,UAGU,OACUF,EADV,YAErB,CACEG,OAAQ,CAAEC,QAASF,EAAAA,EAAAA,WAJF,cACfG,EADe,yBAQdA,GARc,2CAAH,sDAUpB,I,sCCbaC,E,QAAclB,GAAAA,GAAH,gM,6BCyExB,EAnEgB,WACd,OAA4BmB,EAAAA,EAAAA,WAAS,GAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,YAA9B,eAAOK,EAAP,KAAgBC,EAAhB,KAGMb,GADWc,EAAAA,EAAAA,MACGC,SAsBpB,OApBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,sGAEfR,GAAU,GACVE,GAAS,GAHM,SAMLZ,EAAeC,GANV,gBAKLkB,EALK,EAKbC,KAAQD,QAEVL,EAAWK,GAPI,kDASfP,GAAS,GATM,yBAWfF,GAAU,GAXK,6EAAH,qDAchBQ,EAAWjB,EACZ,GAAE,CAACA,KAKF,UAACM,EAAD,WACGE,IAAU,SAAC,IAAD,IACVE,IAAS,SAACU,EAAA,EAAD,IACTR,GACCA,EAAQS,KACN,YAMO,IALLrB,EAKI,EALJA,GACAsB,EAII,EAJJA,OACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,WACkBC,EACd,EADJC,eAAkBD,YAElB,OACE,2BACE,0BACE,gBACEE,IACEF,EACI,kCAAoCA,EACpCG,EAENC,IAAI,qBAGR,4BACE,yBAAG,WAASP,MACZ,uBAAIC,KACJ,yBAAG,SAAOC,UAdLxB,EAkBZ,IAEJY,GAA8B,IAAnBA,EAAQkB,SAAgB,wBAAI,2BAG7C,C,uDCzEM,IAAM5B,EAAO,CAClB6B,SAAU,gCACVC,QAAS,mCACTC,WAAY,mC","sources":["components/ErrMessage/ErrMessage.styled.js","components/ErrMessage/ErrMessage.jsx","components/Loader/loader.styled.js","components/Loader/loader.jsx","js/apiReviews.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","js/refs.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ErrorText = styled.div`\n  text-align: center;\n  margin-top: 100px;\n`;\n","import React from 'react';\nimport { ErrorText } from './ErrMessage.styled';\n\nconst ErrMessage = () => {\n  return <ErrorText>Error, Please reload this page!</ErrorText>;\n};\n\nexport default ErrMessage;\n","import styled from 'styled-components';\n\nexport const LoaderWrap = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n`;\n\nexport const LoadMessage = styled.div`\n  margin-bottom: 10px;\n  font-size: large;\n  font-weight: 500;\n`;\n","import { Hourglass } from 'react-loader-spinner';\nimport { LoadMessage, LoaderWrap } from './loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderWrap>\n      <LoadMessage>Loading...</LoadMessage>\n      <Hourglass\n        visible={true}\n        height=\"50\"\n        width=\"50\"\n        ariaLabel=\"hourglass-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        colors={['#306cce', '#72a1ed']}\n      />\n    </LoaderWrap>\n  );\n};\n","import axios from 'axios';\nimport { refs } from './refs';\n\nconst END_POINT = `movie/`;\n\nconst getFilmReviews = async id => {\n  const responce = await axios.get(\n    `${refs.BASE_URL}${END_POINT}${id}/reviews`,\n    {\n      params: { api_key: refs.API_KEY },\n    }\n  );\n\n  return responce;\n};\nexport default getFilmReviews;\n","import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  list-style: none;\n  flex-wrap: wrap;\n  gap: 10px;\n  padding: 0;\n\n  img {\n    width: 100px;\n    height: 100px;\n    border-radius: 50%;\n  }\n`;\n","import getFilmReviews from 'js/apiReviews';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport defaultPhoto from '../../img/bart.jpg';\nimport { ReviewsList } from './Reviews.styled';\nimport { Loader } from 'components/Loader/loader';\nimport ErrMessage from 'components/ErrMessage/ErrMessage';\n\nconst Reviews = () => {\n  const [loader, setLoader] = useState(false);\n  const [error, setError] = useState(false);\n  const [reviews, setReviews] = useState();\n\n  const moviesId = useParams();\n  const id = moviesId.moviesId;\n\n  useEffect(() => {\n    const getReviews = async () => {\n      try {\n        setLoader(true);\n        setError(false);\n        const {\n          data: { results },\n        } = await getFilmReviews(id);\n        setReviews(results);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setLoader(false);\n      }\n    };\n    getReviews(id);\n  }, [id]);\n\n  // console.log(reviews);\n\n  return (\n    <ReviewsList>\n      {loader && <Loader />}\n      {error && <ErrMessage />}\n      {reviews &&\n        reviews.map(\n          ({\n            id,\n            author,\n            content,\n            created_at,\n            author_details: { avatar_path },\n          }) => {\n            return (\n              <li key={id}>\n                <div>\n                  <img\n                    src={\n                      avatar_path\n                        ? 'https://image.tmdb.org/t/p/w500' + avatar_path\n                        : defaultPhoto\n                    }\n                    alt=\"author avatar\"\n                  ></img>\n                </div>\n                <div>\n                  <p>Author: {author}</p>\n                  <p>{content}</p>\n                  <p>Time: {created_at}</p>\n                </div>\n              </li>\n            );\n          }\n        )}\n      {reviews && reviews.length === 0 && <li>There is no comment.</li>}\n    </ReviewsList>\n  );\n};\n\nexport default Reviews;\n","export const refs = {\n  BASE_URL: 'https://api.themoviedb.org/3/',\n  API_KEY: '9322e843d0da07a43a222238c5af1c78',\n  POSTER_URL: 'https://image.tmdb.org/t/p/w500/',\n};\n\n//      --url 'https://api.themoviedb.org/3/search/movie?query=batman&include_adult=false&language=en-US&page=1' \\\n"],"names":["ErrorText","styled","LoaderWrap","LoadMessage","Loader","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","getFilmReviews","id","axios","refs","params","api_key","responce","ReviewsList","useState","loader","setLoader","error","setError","reviews","setReviews","useParams","moviesId","useEffect","getReviews","results","data","ErrMessage","map","author","content","created_at","avatar_path","author_details","src","defaultPhoto","alt","length","BASE_URL","API_KEY","POSTER_URL"],"sourceRoot":""}